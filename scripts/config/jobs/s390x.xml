<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1254.v3f64639b_11dd">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.SCMTrigger>
          <spec>H/15 * * * *</spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3583.v4f58de0d78d5">
    <script>pipeline {
    agent {
        label &quot;s390x&quot;
    }
    environment {
        FILE_LOG_NAME = &quot;p4tc.log&quot;
        s390x_CONFIG_FILE = &quot;./config-debug-p4tc-s390x&quot;
        
    }
    stages {
        stage(&apos;Clone Project&apos;) {
            steps {
                git branch: &apos;master-next&apos;, url: &apos;https://github.com/p4tc-dev/linux-p4tc-pub.git&apos;
                sh &quot;git branch&quot;
            }
        }
        stage(&apos;Clone Iproute&apos;) {
            steps {
                sh &quot;git clone https://github.com/p4tc-dev/iproute2-p4tc-pub.git&quot;
            }
        }
        stage(&apos;Make Config&apos;) {
            steps {
                sh &quot;./scripts/kconfig/merge_config.sh -m ${env.s390x_CONFIG_FILE} ./tools/testing/selftests/tc-testing/config&quot;
            }
        }
        stage(&apos;Build Linux&apos;) {
            steps {
                sh &quot;make -j \$(nproc) mod2yesconfig&quot;
                sh &quot;make ARCH=s390 CROSS_COMPILE=s390x-linux-gnu- -j \$(nproc)&quot;
            }
        }
        stage(&apos;Build Iproute&apos;) {
            steps {
                sh &quot;&quot;&quot;
                echo &apos;cd iproute2-p4tc-pub &amp;&amp; ./configure &amp;&amp; make -j 16&apos; &gt; iproute_install.sh
                chmod +x iproute_install.sh
                /home/virtme/virtme-run --arch s390x --root /home/s390fs --kimg \$(pwd)/arch/s390/boot/bzImage \
                --memory 2048M --cpus \$(nproc) --rwdir=\&quot;/mnt=\$(pwd)\&quot; --show-command --script-sh \&quot;cd /mnt &amp;&amp;  ./iproute_install.sh\&quot;
                make install DESTDIR=/home/s390fs
                &quot;&quot;&quot;
            }
        }
        stage(&apos;Run Tests&apos;) {
            steps {
                sh &quot;&quot;&quot;
                /home/virtme/virtme-run --arch s390x --root /home/s390fs --kimg \$(pwd)/arch/s390/boot/bzImage \
                --memory 2048M --cpus \$(nproc) --rwdir=\&quot;/mnt=\$(pwd)\&quot; --show-command --script-sh \&quot;cd /mnt/tools/testing/selftests/tc-testing &amp;&amp; ./tdc.py -c p4tc\&quot; 2&gt;&amp;1 | tee ${env.FILE_LOG_NAME}
                &quot;&quot;&quot;
            }
        }
        stage(&apos;Results&apos;) {
            steps {
                //Kernel panic?
                sh &quot;&quot;&quot;
                if [ &quot;\$(grep &quot;Kernel panic&quot; ${env.FILE_LOG_NAME})&quot; != &quot;&quot; ]; then
                    cat ${env.FILE_LOG_NAME};
                    echo &quot;Kernel Panic&quot;;
                    exit 1;
                fi
                &quot;&quot;&quot;
                //Tests != 0
                sh &quot;&quot;&quot;
                if [ &quot;\$(grep -E &quot;exit: [1-9]{1,3}&quot; ${env.FILE_LOG_NAME})&quot; != &quot;&quot; ]; then
                    cat ${env.FILE_LOG_NAME};
                    echo &quot;Error&quot;;
                    exit 1;
                fi
                &quot;&quot;&quot;
                sh &quot;&quot;&quot;
                if [ &quot;\$(grep -E &quot;returncode [1-9]{1,3}&quot; ${env.FILE_LOG_NAME})&quot; != &quot;&quot; ]; then
                    cat ${env.FILE_LOG_NAME};
                    echo &quot;Error&quot;;
                    exit 1;
                fi
                &quot;&quot;&quot;
                //If virtme scripts return something != 0
                sh &quot;&quot;&quot;
                if [ &quot;\$(grep -E &quot;script returned [1-9]{1,3}&quot; ${env.FILE_LOG_NAME})&quot; != &quot;&quot; ]; then
                    cat ${env.FILE_LOG_NAME};
                    echo &quot;Script Error&quot;;
                    exit 1;
                fi
                &quot;&quot;&quot;
                
                sh &quot;echo All tests passed successfully&quot;
            }
        }
    }
    post {
        failure {  
            emailext (
              subject: &apos;$DEFAULT_SUBJECT&apos;,
              body: &apos;$DEFAULT_CONTENT&apos;,
              to: &apos;$DEFAULT_RECIPIENTS&apos;
            )         
        }
        always {
            cleanWs()
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>